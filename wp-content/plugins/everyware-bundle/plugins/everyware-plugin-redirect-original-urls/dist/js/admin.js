jQuery(document).ready((function(){const e=function(e){return jQuery("input, select, textarea").filter('[name$="['+e+']"]')},s=function(e){let s=null;return e.each((function(e,n){n.checked&&(s=n.value)})),s},n=function(e,n,a){let t="paths"===s(o),l=e.filter(":checked").length>0;(!n&&t||l)&&(a=""),e[0].setCustomValidity(a)},a=e("schemes_https").add(e("schemes_http")),t=e("www_subdomains_with").add(e("www_subdomains_without")),l=e("trailing_slashes_with").add(e("trailing_slashes_without")),o=e("extent");let r=null;const c=function(){n(a,!1,"Select at least one scheme.")},i=function(){n(t,!1,"Select whether www. subdomains are used or not.")},u=function(){n(l,!0,"Select whether URLs end with a trailing slash or not.")},d=function(){let n="urls"===s(o);jQuery(".js-extent_url").toggle(n),e("domains").attr("required",n),c(),i()};o.change(d),a.change(c),t.change(i),l.change(u);jQuery(".js-oc-analyze-original-urls").click((function(s){s.preventDefault();let n=jQuery(".js-oc-analysis__waiting"),a=jQuery(".js-oc-analysis__instructions"),t=jQuery(".js-oc-analysis__error"),l=jQuery(".js-oc-analysis__instructions--adjust"),o=n.add(a).add(t).add(l),c=oc_ajax.oc_ajax_url||"",i={action:"analyze_original_urls",original_urls_property_name:e("original_urls_property_name").val(),domains:e("domains").val()};o.addClass("hidden"),n.removeClass("hidden"),jQuery.post(c,i,null,"json").done((function(e){r=e;let t,o='<span class="js-oc-url-result__icon js-oc-url-result__icon--good dashicons dashicons-yes-alt"></span>',c='<span class="js-oc-url-result__icon js-oc-url-result__icon--neutral dashicons dashicons-yes-alt"></span>',i='<span class="js-oc-url-result__icon js-oc-url-result__icon--low dashicons dashicons-warning"></span>',u='<span class="js-oc-url-result__icon js-oc-url-result__icon--incompatible dashicons dashicons-warning"></span>',d='<span class="js-oc-url-result__icon js-oc-url-result__icon--insufficient dashicons dashicons-star-half"></span>',h=new Set;for(const e of r){let s=jQuery("#oc-url-result__"+e.key),n=e.resultText;switch(e.resultStatus){case"good":t=o;break;case"low":t=i,h.add(t);break;case"neutral":t=c;break;case"incompatible":t=u,h.add(t);break;case"insufficient":t=d;break;default:t=""}s.html("").append('<span class="js-oc-url-result"> '+t+n+"</span>")}h.size>0&&(l.find(".js-icons").html(Array.from(h).join("")),l.removeClass("hidden")),n.addClass("hidden"),a.removeClass("hidden"),_(s)})).fail((function(e){jQuery("[id^=oc-url-result__]").html(""),jQuery(".js-oc-analysis__error__message").html(e.responseText),n.addClass("hidden"),t.removeClass("hidden")}))}));const _=function(s){s.preventDefault();for(const s of r){let n=s.id?document.getElementById(s.id):e(s.key)[0];"checkbox"===n.type||"radio"===n.type?n.checked=s.recommendedValue:n.value=s.recommendedValue,jQuery(n).change()}};d(),u()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
