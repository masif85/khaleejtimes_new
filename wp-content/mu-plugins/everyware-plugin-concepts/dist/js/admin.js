!function(t,e,o){let n,c,i,s,r,l,a,p="concept.settings.toggleSpinner",u="concept.settings.updateTooltip",g="concept.settings.removeConcept",d="concept.settings.removePost",f="concepts_settings_sync",m="concepts_remove_post",h="concepts";function C(e,n){(function(e,n="sync"){return t.post(o,{action:h,route:"sync",uuid:e})})(e).success((function(c,i,s){c.length>0&&console.log("responseData: ",c),n.trigger(u,[y(s)]),function(e,n){t.post(o,{action:f,uuid:e}).success((function(){n.trigger(p),n.trigger(g)})).fail((function(t){n.trigger(u,[t.responseJSON.message]),n.trigger(p)}))}(e,n)})).fail((function(t){n.trigger(u,[y(t)]),n.trigger(p)}))}function y(t){return 201===t.status?"Concept created!":424===t.status?"Whoops, Concept could not be found in Open Content! Try refresh the diff list":"Concept updated!"}function b(e){let o=t(e.currentTarget);!function(e,o){0!==o.length?(c.addClass("hidden"),c.filter((function(e,n){return t(n).data("title").toLowerCase().indexOf(o)>-1})).removeClass("hidden")):c.removeClass("hidden")}(0,o.val().toLowerCase())}t(e).ready((function(){n=t(".concepts-js-copy"),r=t(".concepts-js-sync-single"),l=t(".concepts-js-remove-post"),s=t(".concepts-js-table-filter"),c=t(".concept-js-table-row"),i=t(".concepts-js-event-log-health"),a=t(".concepts-js-spinner"),n.tooltip({placement:"bottom",html:!0}),r.tooltip({placement:"left",html:!0}),i.tooltip({placement:"left",html:!0}),s.focus(),n.click((function(o){o.stopPropagation();let n=t(o.currentTarget);!function(t,o){if(!0===e.queryCommandSupported("copy")){let n=e.createElement("textarea");n.value=t,e.body.appendChild(n),n.select();try{let t=e.execCommand("copy");o.trigger(u,[t?"Copied!":"Whoops, not copied!"])}catch(t){console.log("Oops, unable to copied")}e.body.removeChild(n)}else window.prompt("Copy to clipboard: Ctrl+C or Command+C, Enter",t)}(n.data("copy"),n)})),r.click((function(e){let o=t(e.currentTarget);C(o.data("uuid"),o)})),l.click((function(e){let n=t(e.currentTarget);!function(e,n){t.post(o,{action:m,id:e}).success((function(){n.trigger(d)})).fail((function(t){n.trigger(u,[t.responseJSON.message])}))}(n.data("id"),n)})),r.bind(g,(function(e){t(e.currentTarget).closest(".concept-js-table-row").remove()})),l.bind(d,(function(e){let o=t(e.currentTarget).closest(".concept-post__item"),n=o.siblings().length+1,c=o.closest(".panel");n<=1?c.remove():(o.remove(),t(".badge",c).html(n-1))})),s.on("keyup",b).on("blur",b).on("focus",b),t(".concepts-js-tooltip").tooltip({html:!0}).bind(u,(function(e,o){let n=t(e.currentTarget),c=n.data("original-title");n.attr("title",o).tooltip("fixTitle").tooltip("show").attr("title",c).tooltip("fixTitle")})),a.bind(p,(function(e){let o=t(e.currentTarget),n=o;n.is(".fa")||(n=o.children(".fa")),n.hasClass("fa-spin")?n.removeClass("fa-spin"):n.addClass("fa-spin")})),a.click((function(e){t(e.currentTarget).trigger(p)}))}))}(jQuery,document,ajaxurl||"/ajax.php");
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkbWluLmpzIl0sIm5hbWVzIjpbIiQiLCJkb2N1bWVudCIsImFqYXh1cmwiLCIkY29weUJ0biIsIiRjb25jZXB0Um93cyIsIiRldmVudExvZ0hlYWx0aCIsIiRmaWx0ZXJJbnB1dCIsIiRzeW5jQ29uY2VwdCIsIiRyZW1vdmVQb3N0IiwiJHNwaW5uZXIiLCJldmVudHMiLCJ3cEFjdGlvbnMiLCJzeW5jQ29uY2VwdCIsInV1aWQiLCIkZWwiLCJyb3V0ZSIsInBvc3QiLCJhY3Rpb24iLCJyZXF1ZXN0Q29uY2VwdEFwaSIsInN1Y2Nlc3MiLCJkYXRhIiwidGV4dFN0YXR1cyIsImpxWEhSIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsInRyaWdnZXIiLCJwYXJzZUFwaVJlc3BvbnNlIiwiZmFpbCIsInJlc3BvbnNlSlNPTiIsIm1lc3NhZ2UiLCJ1cGRhdGVTdG9yZWREaWZmIiwic3RhdHVzIiwiZmlsdGVySW5wdXQiLCJlIiwiY3VycmVudFRhcmdldCIsImZpbHRlclRleHQiLCJhZGRDbGFzcyIsImZpbHRlciIsImkiLCJyb3ciLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJyZW1vdmVDbGFzcyIsImZpbHRlckNvbmNlcHRzIiwidmFsIiwicmVhZHkiLCJ0b29sdGlwIiwicGxhY2VtZW50IiwiaHRtbCIsImZvY3VzIiwiY2xpY2siLCJzdG9wUHJvcGFnYXRpb24iLCJ0ZXh0IiwiZWwiLCJxdWVyeUNvbW1hbmRTdXBwb3J0ZWQiLCJjb3B5VGV4dEFyZWEiLCJjcmVhdGVFbGVtZW50IiwidmFsdWUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzZWxlY3QiLCJzdWNjZXNzZnVsIiwiZXhlY0NvbW1hbmQiLCJlcnIiLCJyZW1vdmVDaGlsZCIsIndpbmRvdyIsInByb21wdCIsImNvcHlUb0NsaXBib2FyZCIsImlkIiwicmVtb3ZlUG9zdCIsImJpbmQiLCJjbG9zZXN0IiwicmVtb3ZlIiwiJGl0ZW0iLCJpdGVtQ291bnQiLCJzaWJsaW5ncyIsIiRwYW5lbCIsIm9uIiwiJHRvb2x0aXAiLCJlbE9yaWdpbmFsVGV4dCIsImF0dHIiLCJpcyIsImNoaWxkcmVuIiwiaGFzQ2xhc3MiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJDQUFDLFNBQVVBLEVBQUdDLEVBQVVDLEdBQ3BCLElBV0lDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBakJBQyxFQUNtQixpQ0FEbkJBLEVBRW1CLGlDQUZuQkEsRUFHbUIsaUNBSG5CQSxFQUlnQiw4QkFFaEJDLEVBQ2lCLHlCQURqQkEsRUFFZ0IsdUJBRmhCQSxFQUdTLFdBNEViLFNBQVNDLEVBQVlDLEVBQU1DLElBdEIzQixTQUEyQkQsRUFBTUUsRUFBUSxRQUNyQyxPQUFPZixFQUFFZ0IsS0FBS2QsRUFBUyxDQUNuQmUsT0FBUU4sRUFDUkksTUFBTyxPQUNQRixLQUFNQSxLQW1CVkssQ0FBa0JMLEdBQ2JNLFNBQVEsU0FBVUMsRUFBTUMsRUFBWUMsR0FDN0JGLEVBQUtHLE9BQVMsR0FDZEMsUUFBUUMsSUFBSSxpQkFBa0JMLEdBRWxDTixFQUFJWSxRQUFRaEIsRUFBc0IsQ0FBQ2lCLEVBQWlCTCxLQTRCaEUsU0FBMEJULEVBQU1DLEdBQ3JCZCxFQUFFZ0IsS0FBS2QsRUFBUyxDQUNuQmUsT0FBUU4sRUFDUkUsS0FBTUEsSUFFTE0sU0FBUSxXQUNMTCxFQUFJWSxRQUFRaEIsR0FDWkksRUFBSVksUUFBUWhCLE1BR2ZrQixNQUFLLFNBQVVOLEdBQ1pSLEVBQUlZLFFBQVFoQixFQUFzQixDQUFDWSxFQUFNTyxhQUFhQyxVQUN0RGhCLEVBQUlZLFFBQVFoQixNQXZDWnFCLENBQWlCbEIsRUFBTUMsTUFFMUJjLE1BQUssU0FBVU4sR0FDWlIsRUFBSVksUUFBUWhCLEVBQXNCLENBQUNpQixFQUFpQkwsS0FDcERSLEVBQUlZLFFBQVFoQixNQUt4QixTQUFTaUIsRUFBaUJMLEdBQ3RCLE9BQXFCLE1BQWpCQSxFQUFNVSxPQUNDLG1CQUdVLE1BQWpCVixFQUFNVSxPQUNDLGdGQUdKLG1CQUdYLFNBQVNDLEVBQVlDLEdBQ2pCLElBQUlw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QVNuRCxHQUNsQmlCLFFBQVEsWUFDUkEsUUFBUSxRQUNSa0MsS0FBSyxRQUFTRCxHQUNkakMsUUFBUSxlQUlyQnRDLEVBQVM4RCxLQUFLN0QsR0FBc0IsU0FBVXdCLEdBQzFDLElBQUlwQixFQUFNZCxFQUFFa0MsRUFBRUMsZUFDVjFCLEVBQVdLLEVBRVZMLEVBQVN5RSxHQUFHLFNBQ2J6RSxFQUFXSyxFQUFJcUUsU0FBUyxRQUd4QjFFLEVBQVMyRSxTQUFTLFdBQ2xCM0UsRUFBU2tDLFlBQVksV0FFckJsQyxFQUFTNEIsU0FBUyxjQUkxQjVCLEVBQVMwQyxPQUFNLFNBQVVqQixHQUNYbEMsRUFBRWtDLEVBQUVDLGVBQ1ZULFFBQVFoQixTQXBPeEIsQ0F3T0UyRSxPQUFRcEYsU0FBVUMsU0FBVyIsImZpbGUiOiJhZG1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoJCwgZG9jdW1lbnQsIGFqYXh1cmwpIHtcbiAgICBsZXQgZXZlbnRzID0ge1xuICAgICAgICAgICAgdG9nZ2xlU3Bpbm5lcjogJ2NvbmNlcHQuc2V0dGluZ3MudG9nZ2xlU3Bpbm5lcicsXG4gICAgICAgICAgICB1cGRhdGVUb29sdGlwOiAnY29uY2VwdC5zZXR0aW5ncy51cGRhdGVUb29sdGlwJyxcbiAgICAgICAgICAgIHJlbW92ZUNvbmNlcHQ6ICdjb25jZXB0LnNldHRpbmdzLnJlbW92ZUNvbmNlcHQnLFxuICAgICAgICAgICAgcmVtb3ZlUG9zdDogJ2NvbmNlcHQuc2V0dGluZ3MucmVtb3ZlUG9zdCcsXG4gICAgICAgIH0sXG4gICAgICAgIHdwQWN0aW9ucyA9IHtcbiAgICAgICAgICAgIGNvbmNlcHRTeW5jOiAnY29uY2VwdHNfc2V0dGluZ3Nfc3luYycsXG4gICAgICAgICAgICByZW1vdmVQb3N0OiAnY29uY2VwdHNfcmVtb3ZlX3Bvc3QnLFxuICAgICAgICAgICAgYXBpOiAnY29uY2VwdHMnLFxuICAgICAgICB9LFxuICAgICAgICAkY29weUJ0bixcbiAgICAgICAgJGNvbmNlcHRSb3dzLFxuICAgICAgICAkZXZlbnRMb2dIZWFsdGgsXG4gICAgICAgICRmaWx0ZXJJbnB1dCxcbiAgICAgICAgJHN5bmNDb25jZXB0LFxuICAgICAgICAkcmVtb3ZlUG9zdCxcbiAgICAgICAgJHNwaW5uZXI7XG5cbiAgICAvLyBDT1BZIFRPIENMSVBCT0FSRFxuICAgIC8vIEF0dGVtcHRzIHRvIHVzZSAuZXhlY0NvbW1hbmQoJ2NvcGllZCcpIG9uIGEgY3JlYXRlZCB0ZXh0IGZpZWxkXG4gICAgLy8gRmFsbHMgYmFjayB0byBhIHNlbGVjdGFibGUgYWxlcnQgaWYgbm90IHN1cHBvcnRlZFxuICAgIC8vIEF0dGVtcHRzIHRvIGRpc3BsYXkgc3RhdHVzIGluIEJvb3RzdHJhcCB0b29sdGlwXG4gICAgZnVuY3Rpb24gY29weVRvQ2xpcGJvYXJkKHRleHQsIGVsKSB7XG4gICAgICAgIGxldCBjb3B5VGVzdCA9IGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZCgnY29weScpO1xuXG4gICAgICAgIGlmIChjb3B5VGVzdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbGV0IGNvcHlUZXh0QXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgICAgICAgICAgIGNvcHlUZXh0QXJlYS52YWx1ZSA9IHRleHQ7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvcHlUZXh0QXJlYSk7XG4gICAgICAgICAgICBjb3B5VGV4dEFyZWEuc2VsZWN0KCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBzdWNjZXNzZnVsID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcbiAgICAgICAgICAgICAgICBlbC50cmlnZ2VyKGV2ZW50cy51cGRhdGVUb29sdGlwLCBbc3VjY2Vzc2Z1bCA/ICdDb3BpZWQhJyA6ICdXaG9vcHMsIG5vdCBjb3BpZWQhJ10pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ09vcHMsIHVuYWJsZSB0byBjb3BpZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29weVRleHRBcmVhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIGlmIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IC5leGVjQ29tbWFuZCgnY29waWVkJylcbiAgICAgICAgICAgIHdpbmRvdy5wcm9tcHQoXCJDb3B5IHRvIGNsaXBib2FyZDogQ3RybCtDIG9yIENvbW1hbmQrQywgRW50ZXJcIiwgdGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWx0ZXJDb25jZXB0cygkZWwsIGZpbHRlclRleHQpIHtcblxuICAgICAgICBpZiAoZmlsdGVyVGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBubyByb3dzIGFyZSBoaWRkZW4gaWYgbm8gZmlsdGVyLXRleHQgZXhpc3RcbiAgICAgICAgICAgICRjb25jZXB0Um93cy5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkY29uY2VwdFJvd3MuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuXG4gICAgICAgIC8vIGZpbHRlciBvdXQgYWxsIGNvbmNlcHRzIGFuZCByZW1vdmUgaGlkZGVuLWNsYXNzIGlmIG5hbWUgY29udGFpbnMgdGhlIGZpbHRlci10ZXh0XG4gICAgICAgICRjb25jZXB0Um93cy5maWx0ZXIoZnVuY3Rpb24gKGksIHJvdykge1xuICAgICAgICAgICAgbGV0IHRpdGxlID0gJChyb3cpLmRhdGEoJ3RpdGxlJykudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRpdGxlLmluZGV4T2YoZmlsdGVyVGV4dCkgPiAtMTtcblxuICAgICAgICB9KS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVxdWVzdENvbmNlcHRBcGkodXVpZCwgcm91dGUgPSAnc3luYycpIHtcbiAgICAgICAgcmV0dXJuICQucG9zdChhamF4dXJsLCB7XG4gICAgICAgICAgICBhY3Rpb246IHdwQWN0aW9ucy5hcGksXG4gICAgICAgICAgICByb3V0ZTogXCJzeW5jXCIsXG4gICAgICAgICAgICB1dWlkOiB1dWlkLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVQb3N0KGlkLCAkZWwpIHtcblxuICAgICAgICByZXR1cm4gJC5wb3N0KGFqYXh1cmwsIHtcbiAgICAgICAgICAgIGFjdGlvbjogd3BBY3Rpb25zLnJlbW92ZVBvc3QsXG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoZXZlbnRzLnJlbW92ZVBvc3QpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uIChqcVhIUikge1xuICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKGV2ZW50cy51cGRhdGVUb29sdGlwLCBbanFYSFIucmVzcG9uc2VKU09OLm1lc3NhZ2VdKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN5bmNDb25jZXB0KHV1aWQsICRlbCkge1xuICAgICAgICByZXF1ZXN0Q29uY2VwdEFwaSh1dWlkKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVzcG9uc2VEYXRhOiAnLCBkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoZXZlbnRzLnVwZGF0ZVRvb2x0aXAsIFtwYXJzZUFwaVJlc3BvbnNlKGpxWEhSKV0pO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVN0b3JlZERpZmYodXVpZCwgJGVsKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmFpbChmdW5jdGlvbiAoanFYSFIpIHtcbiAgICAgICAgICAgICAgICAkZWwudHJpZ2dlcihldmVudHMudXBkYXRlVG9vbHRpcCwgW3BhcnNlQXBpUmVzcG9uc2UoanFYSFIpXSk7XG4gICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoZXZlbnRzLnRvZ2dsZVNwaW5uZXIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUFwaVJlc3BvbnNlKGpxWEhSKSB7XG4gICAgICAgIGlmIChqcVhIUi5zdGF0dXMgPT09IDIwMSkge1xuICAgICAgICAgICAgcmV0dXJuICdDb25jZXB0IGNyZWF0ZWQhJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChqcVhIUi5zdGF0dXMgPT09IDQyNCkge1xuICAgICAgICAgICAgcmV0dXJuICdXaG9vcHMsIENvbmNlcHQgY291bGQgbm90IGJlIGZvdW5kIGluIE9wZW4gQ29udGVudCEgVHJ5IHJlZnJlc2ggdGhlIGRpZmYgbGlzdCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ0NvbmNlcHQgdXBkYXRlZCEnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbHRlcklucHV0KGUpIHtcbiAgICAgICAgbGV0ICRlbCA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgbGV0IGZpbHRlclRleHQgPSAkZWwudmFsKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZmlsdGVyQ29uY2VwdHMoJGVsLCBmaWx0ZXJUZXh0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVTdG9yZWREaWZmKHV1aWQsICRlbCkge1xuICAgICAgICByZXR1cm4gJC5wb3N0KGFqYXh1cmwsIHtcbiAgICAgICAgICAgIGFjdGlvbjogd3BBY3Rpb25zLmNvbmNlcHRTeW5jLFxuICAgICAgICAgICAgdXVpZDogdXVpZCxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkZWwudHJpZ2dlcihldmVudHMudG9nZ2xlU3Bpbm5lcik7XG4gICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoZXZlbnRzLnJlbW92ZUNvbmNlcHQpO1xuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKGpxWEhSKSB7XG4gICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoZXZlbnRzLnVwZGF0ZVRvb2x0aXAsIFtqcVhIUi5yZXNwb25zZUpTT04ubWVzc2FnZV0pO1xuICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKGV2ZW50cy50b2dnbGVTcGlubmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGNvcHlCdG4gPSAkKCcuY29uY2VwdHMtanMtY29weScpO1xuICAgICAgICAkc3luY0NvbmNlcHQgPSAkKCcuY29uY2VwdHMtanMtc3luYy1zaW5nbGUnKTtcbiAgICAgICAgJHJlbW92ZVBvc3QgPSAkKCcuY29uY2VwdHMtanMtcmVtb3ZlLXBvc3QnKTtcbiAgICAgICAgJGZpbHRlcklucHV0ID0gJCgnLmNvbmNlcHRzLWpzLXRhYmxlLWZpbHRlcicpO1xuICAgICAgICAkY29uY2VwdFJvd3MgPSAkKCcuY29uY2VwdC1qcy10YWJsZS1yb3cnKTtcbiAgICAgICAgJGV2ZW50TG9nSGVhbHRoID0gJCgnLmNvbmNlcHRzLWpzLWV2ZW50LWxvZy1oZWFsdGgnKTtcbiAgICAgICAgJHNwaW5uZXIgPSAkKCcuY29uY2VwdHMtanMtc3Bpbm5lcicpO1xuXG4gICAgICAgIC8vIEluaXRpYXRlIHRvb2x0aXBzXG4gICAgICAgICRjb3B5QnRuLnRvb2x0aXAoe3BsYWNlbWVudDogJ2JvdHRvbScsIGh0bWw6IHRydWV9KTtcbiAgICAgICAgJHN5bmNDb25jZXB0LnRvb2x0aXAoe3BsYWNlbWVudDogJ2xlZnQnLCBodG1sOiB0cnVlfSk7XG4gICAgICAgICRldmVudExvZ0hlYWx0aC50b29sdGlwKHtwbGFjZW1lbnQ6ICdsZWZ0JywgaHRtbDogdHJ1ZX0pO1xuXG4gICAgICAgIC8vIFBsYWNlIGZvY3VzIG9uIHRoZSBmaWx0ZXIgZmllbGRcbiAgICAgICAgJGZpbHRlcklucHV0LmZvY3VzKCk7XG5cbiAgICAgICAgLy8gR3JhYiBhbnkgdGV4dCBpbiB0aGUgYXR0cmlidXRlICdkYXRhLWNvcHknIGFuZCBwYXNzIGl0IHRvIHRoZSBjb3BpZWQgZnVuY3Rpb25cbiAgICAgICAgJGNvcHlCdG4uY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBsZXQgJGVsID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgbGV0IHRleHQgPSAkZWwuZGF0YSgnY29weScpO1xuICAgICAgICAgICAgY29weVRvQ2xpcGJvYXJkKHRleHQsICRlbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEdyYWIgYW55IHV1aWQgaW4gdGhlIGF0dHJpYnV0ZSAnZGF0YS11dWlkJyBhbmQgcGFzcyBpdCB0byB0aGUgU3luY0NvbmNlcHQgZnVuY3Rpb25cbiAgICAgICAgJHN5bmNDb25jZXB0LmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBsZXQgJGVsID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgc3luY0NvbmNlcHQoJGVsLmRhdGEoJ3V1aWQnKSwgJGVsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHJlbW92ZVBvc3QuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGxldCAkZWwgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICByZW1vdmVQb3N0KCRlbC5kYXRhKCdpZCcpLCAkZWwpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc3luY0NvbmNlcHQuYmluZChldmVudHMucmVtb3ZlQ29uY2VwdCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5jbG9zZXN0KCcuY29uY2VwdC1qcy10YWJsZS1yb3cnKS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHJlbW92ZVBvc3QuYmluZChldmVudHMucmVtb3ZlUG9zdCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGxldCAkaXRlbSA9ICQoZS5jdXJyZW50VGFyZ2V0KS5jbG9zZXN0KCcuY29uY2VwdC1wb3N0X19pdGVtJyk7XG4gICAgICAgICAgICBsZXQgaXRlbUNvdW50ID0gJGl0ZW0uc2libGluZ3MoKS5sZW5ndGggKyAxOyAvLyBpbmNsdWRlIGl0ZW0gdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgICAgbGV0ICRwYW5lbCA9ICRpdGVtLmNsb3Nlc3QoJy5wYW5lbCcpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgZW50aXJlIGxpc3QgdGhpcyB0aGUgbGFzdCBpdGVtIGlzIGFib3V0IHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICAgIGlmKCBpdGVtQ291bnQgPD0gMSkge1xuICAgICAgICAgICAgICAgICRwYW5lbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGl0ZW0ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgJCgnLmJhZGdlJywgJHBhbmVsKS5odG1sKGl0ZW1Db3VudCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBVc2UgaW5wdXQgdG8gdHJpZ2dlciBhIGZpbHRlcmluZyBvZiBjb25jZXB0c1xuICAgICAgICAkZmlsdGVySW5wdXRcbiAgICAgICAgICAgIC5vbigna2V5dXAnLCBmaWx0ZXJJbnB1dClcbiAgICAgICAgICAgIC5vbignYmx1cicsIGZpbHRlcklucHV0KVxuICAgICAgICAgICAgLm9uKCdmb2N1cycsIGZpbHRlcklucHV0KTtcblxuICAgICAgICAvLyBIYW5kbGVyIGZvciB1cGRhdGluZyB0aGUgdG9vbHRpcCBtZXNzYWdlLlxuICAgICAgICAkKCcuY29uY2VwdHMtanMtdG9vbHRpcCcpXG4gICAgICAgICAgICAudG9vbHRpcCh7aHRtbDogdHJ1ZX0pXG4gICAgICAgICAgICAuYmluZChldmVudHMudXBkYXRlVG9vbHRpcCwgZnVuY3Rpb24gKGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBsZXQgJHRvb2x0aXAgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgbGV0IGVsT3JpZ2luYWxUZXh0ID0gJHRvb2x0aXAuZGF0YSgnb3JpZ2luYWwtdGl0bGUnKTtcblxuICAgICAgICAgICAgICAgICR0b29sdGlwLmF0dHIoJ3RpdGxlJywgbWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgLnRvb2x0aXAoJ2ZpeFRpdGxlJylcbiAgICAgICAgICAgICAgICAgICAgLnRvb2x0aXAoJ3Nob3cnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndGl0bGUnLCBlbE9yaWdpbmFsVGV4dClcbiAgICAgICAgICAgICAgICAgICAgLnRvb2x0aXAoJ2ZpeFRpdGxlJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBIYW5kbGVyIHNwaW5uaW5nIGljb25cbiAgICAgICAgJHNwaW5uZXIuYmluZChldmVudHMudG9nZ2xlU3Bpbm5lciwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGxldCAkZWwgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICBsZXQgJHNwaW5uZXIgPSAkZWw7XG5cbiAgICAgICAgICAgIGlmICghJHNwaW5uZXIuaXMoJy5mYScpKSB7XG4gICAgICAgICAgICAgICAgJHNwaW5uZXIgPSAkZWwuY2hpbGRyZW4oJy5mYScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJHNwaW5uZXIuaGFzQ2xhc3MoJ2ZhLXNwaW4nKSkge1xuICAgICAgICAgICAgICAgICRzcGlubmVyLnJlbW92ZUNsYXNzKCdmYS1zcGluJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRzcGlubmVyLmFkZENsYXNzKCdmYS1zcGluJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzcGlubmVyLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBsZXQgJGVsID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgJGVsLnRyaWdnZXIoZXZlbnRzLnRvZ2dsZVNwaW5uZXIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxufShqUXVlcnksIGRvY3VtZW50LCBhamF4dXJsIHx8ICcvYWpheC5waHAnKSk7XG4iXX0=
