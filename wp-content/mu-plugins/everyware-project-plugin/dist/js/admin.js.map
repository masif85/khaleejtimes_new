{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/assets/js/admin.js","src/assets/js/components/image-upload.js","src/assets/js/components/json-import-export.js","src/assets/js/components/oc-query-tester.js","src/assets/js/components/sortable-list.js","src/assets/js/jquery/jquery.multi-select.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnfile":"admin.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","require('./components/sortable-list');\nrequire('./components/json-import-export');\nrequire('./jquery/jquery.multi-select.js');\nrequire('./components/oc-query-tester');\nrequire('./components/image-upload');\n\njQuery(function($) {\n    $('.ew-wrap .ew-tooltip').each(function( i, tooltip) {\n        var tooltipContainer = $(tooltip).closest(\".ew-wrap\");\n\n        $(tooltip).tooltip({\n            container: tooltipContainer,\n            trigger: \"focus\",\n            toggle: \"tooltip\",\n            html: true,\n            template: '<div class=\"tooltip ew-tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>'\n        });\n    });\n\n    $('.ew-wrap .ew-popover').popover();\n});\n","jQuery(function($) {\n    $(document).ready( function(e) {\n\n        window.ImageUpload = window.ImageUpload || {};\n        var ImageUpload = window.ImageUpload;\n\n        ImageUpload.file_frame = null;\n        ImageUpload.initialized = false;\n        ImageUpload.uploadTriggered = false;\n        ImageUpload.uploadButton = undefined;\n\n        ImageUpload.init = function() {\n            ImageUpload.initialized = true;\n\n            $(document).on('click', '.upload_button', function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                if( ImageUpload.uploadTriggered ) return;\n                ImageUpload.uploadTriggered = true;\n                ImageUpload.uploadButton = $(e.target);\n\n                ImageUpload.file_frame = wp.media.frames.file_frame = wp.media({\n                    title: 'Picture',\n                    button: {\n                        text: \"select\"\n                    },\n                    multiple: false\n                });\n\n                ImageUpload.file_frame.on( 'select', function() {\n                    var attachment = ImageUpload.file_frame.state().get('selection').first().toJSON();\n                    ImageUpload.appendImage( attachment );\n                });\n\n                ImageUpload.file_frame.on( 'close', function() {\n                    ImageUpload.uploadTriggered = false;\n                });\n\n                ImageUpload.file_frame.open();\n            });\n\n            $(document).on('click', '.image_placeholder .remove', ImageUpload.removeImage );\n        };\n\n        ImageUpload.appendImage = function( json ) {\n            $(ImageUpload.uploadButton).siblings('.image_placeholder')\n                .html(\n                    '<span class=\"ew-image__wrapper img_wrapper\">' +\n                    '<img class=\"ew-img__object\" src=\"'+ ImageUpload.createImageSrc(json.url) +'\"/>' +\n                    '<span class=\"ew-image__icon--remove remove fa fa-times\"></span></span>'\n                );\n            $(ImageUpload.uploadButton).siblings('.hidden').val(json.url);\n            ImageUpload.uploadButton.val('Byt bild');\n        };\n\n        ImageUpload.createImageSrc = function(url) {\n            return url + '?' + new Date().getTime();\n        };\n\n        ImageUpload.removeImage = function(e) {\n            var $placeholder = $(e.target).parents('.image_placeholder');\n            $placeholder.siblings('.hidden').val('');\n            $placeholder.html('');\n            ImageUpload.uploadButton.val('VÃ¤lj bild');\n        };\n\n        if( !ImageUpload.initialized ) {\n            ImageUpload.init();\n        }\n    });\n});\n","jQuery(function($) {\n    var $mainWrapper, $importWrapper, $exportWrapper;\n\n    $(document).ready(function () {\n\n        // Import and export\n        $mainWrapper = $('#import-export__wrapper');\n        $importWrapper = $('.import__wrapper', $mainWrapper);\n        $exportWrapper = $('.export__wrapper', $mainWrapper);\n\n        $mainWrapper.on('click', '.export__btn', function () {\n            $exportWrapper.slideToggle();\n            $exportWrapper.find('textarea').select();\n\n            if ($importWrapper.is(\":visible\")) {\n                $importWrapper.slideToggle();\n            }\n        });\n\n        $mainWrapper.on('click', '.import__btn', function () {\n            $importWrapper.slideToggle();\n            $importWrapper.find('textarea').select();\n\n            if ($exportWrapper.is(\":visible\")) {\n                $exportWrapper.slideToggle();\n            }\n        });\n    });\n});\n","/*global oc_ajax*/\n/*global translation*/\n\noc_ajax.oc_ajax_url = oc_ajax.oc_ajax_url || '';\ntranslation.oc_query_result = translation.oc_query_result || '';\n\n//Ajax test OC query from widget\njQuery(function($) {\n    var postUrl = oc_ajax.oc_ajax_url || '';\n    var classes = {\n        testResultWrapperLoaded: 'oc-query-result--loaded',\n        testResultHeadline: 'oc-query-result__headline',\n        testResultMessage: 'oc-query-result__message',\n    };\n    var selectors = {\n        wrapper: '.oc-query-box',\n        testResultWrapper: '.oc-query-result',\n        testButton: '.oc-query-test',\n        oc: {\n            limit: '.oc-query-limit',\n            query: '.oc-query-search',\n            start: '.oc-query-start',\n            sort: '.oc-query-sort',\n        },\n    };\n\n    var resultWrapper;\n\n    function getQueryData($formWrapper) {\n        return {\n            action: 'test_oc_query',\n            query: $formWrapper.find(selectors.oc.query).val(),\n            oc_query_start: $formWrapper.find(selectors.oc.start).val(),\n            oc_query_limit: $formWrapper.find(selectors.oc.limit).val(),\n            oc_query_sort: $formWrapper.find(selectors.oc.sort).val(),\n        }\n    }\n\n    $(document).on('click', selectors.testButton, function (e) {\n        e.preventDefault();\n        var el = e.target,\n            $el = $(el),\n            $parent = $el.closest(selectors.wrapper),\n            queryData = getQueryData($el.closest(selectors.wrapper));\n\n        resultWrapper = $parent.find(selectors.testResultWrapper);\n\n        resultWrapper.empty().append('<i class=\"fa fa-spinner fa-spin fa-2x fa-fw\"></i>').addClass(classes.testResultWrapperLoaded);\n        $.post(postUrl, queryData)\n            .done(function (data) {\n                var result = '<h4 class=\"oc-query-result__headline\">' + translation.oc_query_result + '</h4>';\n\n                var parsedData = $.parseJSON(data);\n\n                for (var obj in parsedData) {\n                    if ({}.hasOwnProperty.call(parsedData, obj)) {\n                        result += '<p class=\"oc-query-result__message\">' + obj + \" : \" + parsedData[obj] + '</p>';\n                    }\n                }\n\n                resultWrapper.empty().append(result);\n            });\n\n        return false;\n    });\n});\n","jQuery(function($) {\n    var $list,\n        classes = {\n            list: 'sortable-list',\n            item: 'sortable-list__item',\n            itemClone: 'sortable-list__item--template',\n            dragHandle: 'sortable-list__drag-handle',\n            placeHolder: 'sortable-placeholder',\n            addBtn: 'sortable-list__item-add',\n            deleteBtn: 'sortable-list__item-delete',\n        },\n        selectors = {\n            list: '.' + classes.list,\n            item: '.' + classes.item,\n            itemClone: '.' + classes.itemClone,\n            dragHandle: '.' + classes.dragHandle,\n            addBtn: '.' + classes.addBtn,\n            deleteBtn: '.' + classes.deleteBtn,\n        };\n\n    $(document).ready(function () {\n        $list = $(selectors.list).sortable({\n            axis: \"y\",\n            containment: \"parent\",\n            items: \"> \" + selectors.item,\n            cursor: \"move\",\n            handle: selectors.dragHandle,\n            placeholder: \"sortable-placeholder\",\n            forcePlaceholderSize: true,\n            tolerance: \"pointer\",\n        });\n\n        $list.on('click', selectors.deleteBtn, function (e) {\n            e.preventDefault();\n\n            var $row = $(e.target).closest(selectors.item).fadeOut(200, function () {\n                $row.remove()\n            });\n        });\n\n        $(selectors.addBtn).on('click', function (e) {\n            e.preventDefault();\n\n            var newItem = $(selectors.itemClone).clone();\n\n            newItem.removeClass(classes.itemClone).appendTo($list);\n\n            newItem.find('input').eq(0).focus();\n        });\n    });\n});\n","/*\n* MultiSelect v0.9.12\n* Copyright (c) 2012 Louis Cuny\n*\n* This program is free software. It comes without any warranty, to\n* the extent permitted by applicable law. You can redistribute it\n* and/or modify it under the terms of the Do What The Fuck You Want\n* To Public License, Version 2, as published by Sam Hocevar. See\n* http://sam.zoy.org/wtfpl/COPYING for more details.\n*/\n\n!function ($) {\n\n    \"use strict\";\n\n\n    /* MULTISELECT CLASS DEFINITION\n     * ====================== */\n\n    var MultiSelect = function (element, options) {\n        this.options = options;\n        this.$element = $(element);\n        this.$container = $('<div/>', {'class': \"ms-container\"});\n        this.$selectableContainer = $('<div/>', {'class': 'ms-selectable'});\n        this.$selectionContainer = $('<div/>', {'class': 'ms-selection'});\n        this.$selectableUl = $('<ul/>', {'class': \"ms-list\", 'tabindex': '-1'});\n        this.$selectionUl = $('<ul/>', {'class': \"ms-list\", 'tabindex': '-1'});\n        this.scrollTo = 0;\n        this.elemsSelector = 'li:visible:not(.ms-optgroup-label,.ms-optgroup-container,.' + options.disabledClass + ')';\n    };\n\n    MultiSelect.prototype = {\n        constructor: MultiSelect,\n\n        init: function () {\n            var that = this,\n                ms = this.$element;\n\n            if (ms.next('.ms-container').length === 0) {\n                ms.css({position: 'absolute', left: '-9999px'});\n                ms.attr('id', ms.attr('id') ? ms.attr('id') : Math.ceil(Math.random() * 1000) + 'multiselect');\n                this.$container.attr('id', 'ms-' + ms.attr('id'));\n                this.$container.addClass(that.options.cssClass);\n                ms.find('option').each(function () {\n                    that.generateLisFromOption(this);\n                });\n\n                this.$selectionUl.find('.ms-optgroup-label').hide();\n\n                if (that.options.selectableHeader) {\n                    that.$selectableContainer.append(that.options.selectableHeader);\n                }\n                that.$selectableContainer.append(that.$selectableUl);\n                if (that.options.selectableFooter) {\n                    that.$selectableContainer.append(that.options.selectableFooter);\n                }\n\n                if (that.options.selectionHeader) {\n                    that.$selectionContainer.append(that.options.selectionHeader);\n                }\n                that.$selectionContainer.append(that.$selectionUl);\n                if (that.options.selectionFooter) {\n                    that.$selectionContainer.append(that.options.selectionFooter);\n                }\n\n                that.$container.append(that.$selectableContainer);\n                that.$container.append(that.$selectionContainer);\n                ms.after(that.$container);\n\n                that.activeMouse(that.$selectableUl);\n                that.activeKeyboard(that.$selectableUl);\n\n                var action = that.options.dblClick ? 'dblclick' : 'click';\n\n                that.$selectableUl.on(action, '.ms-elem-selectable', function () {\n                    that.select($(this).data('ms-value'));\n                });\n                that.$selectionUl.on(action, '.ms-elem-selection', function () {\n                    that.deselect($(this).data('ms-value'));\n                });\n\n                that.activeMouse(that.$selectionUl);\n                that.activeKeyboard(that.$selectionUl);\n\n                ms.on('focus', function () {\n                    that.$selectableUl.focus();\n                });\n            }\n\n            var selectedValues = ms.find('option:selected').map(function () {\n                return $(this).val();\n            }).get();\n            that.select(selectedValues, 'init');\n\n            if (typeof that.options.afterInit === 'function') {\n                that.options.afterInit.call(this, this.$container);\n            }\n        },\n\n        'generateLisFromOption': function (option, index, $container) {\n            var that = this,\n                ms = that.$element,\n                attributes = \"\",\n                $option = $(option);\n\n            for (var cpt = 0; cpt < option.attributes.length; cpt++) {\n                var attr = option.attributes[cpt];\n\n                if (attr.name !== 'value' && attr.name !== 'disabled') {\n                    attributes += attr.name + '=\"' + attr.value + '\" ';\n                }\n            }\n            var selectableLi = $('<li ' + attributes + '><span>' + that.escapeHTML($option.text()) + '</span></li>'),\n                selectedLi = selectableLi.clone(),\n                value = $option.val(),\n                elementId = that.sanitize(value);\n\n            selectableLi\n                .data('ms-value', value)\n                .addClass('ms-elem-selectable')\n                .attr('id', elementId + '-selectable');\n\n            selectedLi\n                .data('ms-value', value)\n                .addClass('ms-elem-selection')\n                .attr('id', elementId + '-selection')\n                .hide();\n\n            if ($option.prop('disabled') || ms.prop('disabled')) {\n                selectedLi.addClass(that.options.disabledClass);\n                selectableLi.addClass(that.options.disabledClass);\n            }\n\n            var $optgroup = $option.parent('optgroup');\n\n            if ($optgroup.length > 0) {\n                var optgroupLabel = $optgroup.attr('label'),\n                    optgroupId = that.sanitize(optgroupLabel),\n                    $selectableOptgroup = that.$selectableUl.find('#optgroup-selectable-' + optgroupId),\n                    $selectionOptgroup = that.$selectionUl.find('#optgroup-selection-' + optgroupId);\n\n                if ($selectableOptgroup.length === 0) {\n                    var optgroupContainerTpl = '<li class=\"ms-optgroup-container\"></li>',\n                        optgroupTpl = '<ul class=\"ms-optgroup\"><li class=\"ms-optgroup-label\"><span>' + optgroupLabel + '</span></li></ul>';\n\n                    $selectableOptgroup = $(optgroupContainerTpl);\n                    $selectionOptgroup = $(optgroupContainerTpl);\n                    $selectableOptgroup.attr('id', 'optgroup-selectable-' + optgroupId);\n                    $selectionOptgroup.attr('id', 'optgroup-selection-' + optgroupId);\n                    $selectableOptgroup.append($(optgroupTpl));\n                    $selectionOptgroup.append($(optgroupTpl));\n                    if (that.options.selectableOptgroup) {\n                        $selectableOptgroup.find('.ms-optgroup-label').on('click', function () {\n                            var values = $optgroup.children(':not(:selected, :disabled)').map(function () {\n                                return $(this).val();\n                            }).get();\n                            that.select(values);\n                        });\n                        $selectionOptgroup.find('.ms-optgroup-label').on('click', function () {\n                            var values = $optgroup.children(':selected:not(:disabled)').map(function () {\n                                return $(this).val();\n                            }).get();\n                            that.deselect(values);\n                        });\n                    }\n                    that.$selectableUl.append($selectableOptgroup);\n                    that.$selectionUl.append($selectionOptgroup);\n                }\n                index = index === undefined ? $selectableOptgroup.find('ul').children().length : index + 1;\n                selectableLi.insertAt(index, $selectableOptgroup.children());\n                selectedLi.insertAt(index, $selectionOptgroup.children());\n            } else {\n                index = index === undefined ? that.$selectableUl.children().length : index;\n\n                selectableLi.insertAt(index, that.$selectableUl);\n                selectedLi.insertAt(index, that.$selectionUl);\n            }\n        },\n\n        'addOption': function (options) {\n            var that = this;\n\n            if (options.value !== undefined && options.value !== null) {\n                options = [options];\n            }\n            $.each(options, function (index, option) {\n                if (option.value !== undefined && option.value !== null &&\n                    that.$element.find(\"option[value='\" + option.value + \"']\").length === 0) {\n                    var $option = $('<option value=\"' + option.value + '\">' + option.text + '</option>'),\n                        index = parseInt((typeof option.index === 'undefined' ? that.$element.children().length : option.index)),\n                        $container = option.nested === undefined ? that.$element : $(\"optgroup[label='\" + option.nested + \"']\");\n\n                    $option.insertAt(index, $container);\n                    that.generateLisFromOption($option.get(0), index, option.nested);\n                }\n            });\n        },\n\n        'escapeHTML': function (text) {\n            return $(\"<div>\").text(text).html();\n        },\n\n        'activeKeyboard': function ($list) {\n            var that = this;\n\n            $list.on('focus', function () {\n                $(this).addClass('ms-focus');\n            })\n                .on('blur', function () {\n                    $(this).removeClass('ms-focus');\n                })\n                .on('keydown', function (e) {\n                    switch (e.which) {\n                        case 40:\n                        case 38:\n                            e.preventDefault();\n                            e.stopPropagation();\n                            that.moveHighlight($(this), (e.which === 38) ? -1 : 1);\n                            return;\n                        case 37:\n                        case 39:\n                            e.preventDefault();\n                            e.stopPropagation();\n                            that.switchList($list);\n                            return;\n                        case 9:\n                            if (that.$element.is('[tabindex]')) {\n                                e.preventDefault();\n                                var tabindex = parseInt(that.$element.attr('tabindex'), 10);\n                                tabindex = (e.shiftKey) ? tabindex - 1 : tabindex + 1;\n                                $('[tabindex=\"' + (tabindex) + '\"]').focus();\n                                return;\n                            } else {\n                                if (e.shiftKey) {\n                                    that.$element.trigger('focus');\n                                }\n                            }\n                    }\n                    if ($.inArray(e.which, that.options.keySelect) > -1) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        that.selectHighlighted($list);\n                        return;\n                    }\n                });\n        },\n\n        'moveHighlight': function ($list, direction) {\n            var $elems = $list.find(this.elemsSelector),\n                $currElem = $elems.filter('.ms-hover'),\n                $nextElem = null,\n                elemHeight = $elems.first().outerHeight(),\n                containerHeight = $list.height(),\n                containerSelector = '#' + this.$container.prop('id');\n\n            $elems.removeClass('ms-hover');\n            if (direction === 1) { // DOWN\n\n                $nextElem = $currElem.nextAll(this.elemsSelector).first();\n                if ($nextElem.length === 0) {\n                    var $optgroupUl = $currElem.parent();\n\n                    if ($optgroupUl.hasClass('ms-optgroup')) {\n                        var $optgroupLi = $optgroupUl.parent(),\n                            $nextOptgroupLi = $optgroupLi.next(':visible');\n\n                        if ($nextOptgroupLi.length > 0) {\n                            $nextElem = $nextOptgroupLi.find(this.elemsSelector).first();\n                        } else {\n                            $nextElem = $elems.first();\n                        }\n                    } else {\n                        $nextElem = $elems.first();\n                    }\n                }\n            } else if (direction === -1) { // UP\n\n                $nextElem = $currElem.prevAll(this.elemsSelector).first();\n                if ($nextElem.length === 0) {\n                    var $optgroupUl = $currElem.parent();\n\n                    if ($optgroupUl.hasClass('ms-optgroup')) {\n                        var $optgroupLi = $optgroupUl.parent(),\n                            $prevOptgroupLi = $optgroupLi.prev(':visible');\n\n                        if ($prevOptgroupLi.length > 0) {\n                            $nextElem = $prevOptgroupLi.find(this.elemsSelector).last();\n                        } else {\n                            $nextElem = $elems.last();\n                        }\n                    } else {\n                        $nextElem = $elems.last();\n                    }\n                }\n            }\n            if ($nextElem.length > 0) {\n                $nextElem.addClass('ms-hover');\n                var scrollTo = $list.scrollTop() + $nextElem.position().top -\n                    containerHeight / 2 + elemHeight / 2;\n\n                $list.scrollTop(scrollTo);\n            }\n        },\n\n        'selectHighlighted': function ($list) {\n            var $elems = $list.find(this.elemsSelector),\n                $highlightedElem = $elems.filter('.ms-hover').first();\n\n            if ($highlightedElem.length > 0) {\n                if ($list.parent().hasClass('ms-selectable')) {\n                    this.select($highlightedElem.data('ms-value'));\n                } else {\n                    this.deselect($highlightedElem.data('ms-value'));\n                }\n                $elems.removeClass('ms-hover');\n            }\n        },\n\n        'switchList': function ($list) {\n            $list.blur();\n            this.$container.find(this.elemsSelector).removeClass('ms-hover');\n            if ($list.parent().hasClass('ms-selectable')) {\n                this.$selectionUl.focus();\n            } else {\n                this.$selectableUl.focus();\n            }\n        },\n\n        'activeMouse': function ($list) {\n            var that = this;\n\n            this.$container.on('mouseenter', that.elemsSelector, function () {\n                $(this).parents('.ms-container').find(that.elemsSelector).removeClass('ms-hover');\n                $(this).addClass('ms-hover');\n            });\n\n            this.$container.on('mouseleave', that.elemsSelector, function () {\n                $(this).parents('.ms-container').find(that.elemsSelector).removeClass('ms-hover');\n            });\n        },\n\n        'refresh': function () {\n            this.destroy();\n            this.$element.multiSelect(this.options);\n        },\n\n        'destroy': function () {\n            $(\"#ms-\" + this.$element.attr(\"id\")).remove();\n            this.$element.off('focus');\n            this.$element.css('position', '').css('left', '');\n            this.$element.removeData('multiselect');\n        },\n\n        'select': function (value, method) {\n            if (typeof value === 'string') {\n                value = [value];\n            }\n\n            var that = this,\n                ms = this.$element,\n                msIds = $.map(value, function (val) {\n                    return (that.sanitize(val));\n                }),\n                selectables = this.$selectableUl.find('#' + msIds.join('-selectable, #') + '-selectable').filter(':not(.' + that.options.disabledClass + ')'),\n                selections = this.$selectionUl.find('#' + msIds.join('-selection, #') + '-selection').filter(':not(.' + that.options.disabledClass + ')'),\n                options = ms.find('option:not(:disabled)').filter(function () {\n                    return ($.inArray(this.value, value) > -1);\n                });\n\n            if (method === 'init') {\n                selectables = this.$selectableUl.find('#' + msIds.join('-selectable, #') + '-selectable'),\n                    selections = this.$selectionUl.find('#' + msIds.join('-selection, #') + '-selection');\n            }\n\n            if (selectables.length > 0) {\n                selectables.addClass('ms-selected').hide();\n                selections.addClass('ms-selected').show();\n\n                options.prop('selected', true);\n\n                that.$container.find(that.elemsSelector).removeClass('ms-hover');\n\n                var selectableOptgroups = that.$selectableUl.children('.ms-optgroup-container');\n                if (selectableOptgroups.length > 0) {\n                    selectableOptgroups.each(function () {\n                        var selectablesLi = $(this).find('.ms-elem-selectable');\n                        if (selectablesLi.length === selectablesLi.filter('.ms-selected').length) {\n                            $(this).find('.ms-optgroup-label').hide();\n                        }\n                    });\n\n                    var selectionOptgroups = that.$selectionUl.children('.ms-optgroup-container');\n                    selectionOptgroups.each(function () {\n                        var selectionsLi = $(this).find('.ms-elem-selection');\n                        if (selectionsLi.filter('.ms-selected').length > 0) {\n                            $(this).find('.ms-optgroup-label').show();\n                        }\n                    });\n                } else {\n                    if (that.options.keepOrder && method !== 'init') {\n                        var selectionLiLast = that.$selectionUl.find('.ms-selected');\n                        if ((selectionLiLast.length > 1) && (selectionLiLast.last().get(0) != selections.get(0))) {\n                            selections.insertAfter(selectionLiLast.last());\n                        }\n                    }\n                }\n                if (method !== 'init') {\n                    ms.trigger('change');\n                    if (typeof that.options.afterSelect === 'function') {\n                        that.options.afterSelect.call(this, value);\n                    }\n                }\n            }\n        },\n\n        'deselect': function (value) {\n            if (typeof value === 'string') {\n                value = [value];\n            }\n\n            var that = this,\n                ms = this.$element,\n                msIds = $.map(value, function (val) {\n                    return (that.sanitize(val));\n                }),\n                selectables = this.$selectableUl.find('#' + msIds.join('-selectable, #') + '-selectable'),\n                selections = this.$selectionUl.find('#' + msIds.join('-selection, #') + '-selection').filter('.ms-selected').filter(':not(.' + that.options.disabledClass + ')'),\n                options = ms.find('option').filter(function () {\n                    return ($.inArray(this.value, value) > -1);\n                });\n\n            if (selections.length > 0) {\n                selectables.removeClass('ms-selected').show();\n                selections.removeClass('ms-selected').hide();\n                options.prop('selected', false);\n\n                that.$container.find(that.elemsSelector).removeClass('ms-hover');\n\n                var selectableOptgroups = that.$selectableUl.children('.ms-optgroup-container');\n                if (selectableOptgroups.length > 0) {\n                    selectableOptgroups.each(function () {\n                        var selectablesLi = $(this).find('.ms-elem-selectable');\n                        if (selectablesLi.filter(':not(.ms-selected)').length > 0) {\n                            $(this).find('.ms-optgroup-label').show();\n                        }\n                    });\n\n                    var selectionOptgroups = that.$selectionUl.children('.ms-optgroup-container');\n                    selectionOptgroups.each(function () {\n                        var selectionsLi = $(this).find('.ms-elem-selection');\n                        if (selectionsLi.filter('.ms-selected').length === 0) {\n                            $(this).find('.ms-optgroup-label').hide();\n                        }\n                    });\n                }\n                ms.trigger('change');\n                if (typeof that.options.afterDeselect === 'function') {\n                    that.options.afterDeselect.call(this, value);\n                }\n            }\n        },\n\n        'select_all': function () {\n            var ms = this.$element,\n                values = ms.val();\n\n            ms.find('option:not(\":disabled\")').prop('selected', true);\n            this.$selectableUl.find('.ms-elem-selectable').filter(':not(.' + this.options.disabledClass + ')').addClass('ms-selected').hide();\n            this.$selectionUl.find('.ms-optgroup-label').show();\n            this.$selectableUl.find('.ms-optgroup-label').hide();\n            this.$selectionUl.find('.ms-elem-selection').filter(':not(.' + this.options.disabledClass + ')').addClass('ms-selected').show();\n            this.$selectionUl.focus();\n            ms.trigger('change');\n            if (typeof this.options.afterSelect === 'function') {\n                var selectedValues = $.grep(ms.val(), function (item) {\n                    return $.inArray(item, values) < 0;\n                });\n                this.options.afterSelect.call(this, selectedValues);\n            }\n        },\n\n        'deselect_all': function () {\n            var ms = this.$element,\n                values = ms.val();\n\n            ms.find('option').prop('selected', false);\n            this.$selectableUl.find('.ms-elem-selectable').removeClass('ms-selected').show();\n            this.$selectionUl.find('.ms-optgroup-label').hide();\n            this.$selectableUl.find('.ms-optgroup-label').show();\n            this.$selectionUl.find('.ms-elem-selection').removeClass('ms-selected').hide();\n            this.$selectableUl.focus();\n            ms.trigger('change');\n            if (typeof this.options.afterDeselect === 'function') {\n                this.options.afterDeselect.call(this, values);\n            }\n        },\n\n        sanitize: function (value) {\n            var hash = 0, i, character;\n            if (value.length == 0) return hash;\n            var ls = 0;\n            for (i = 0, ls = value.length; i < ls; i++) {\n                character = value.charCodeAt(i);\n                hash = ((hash << 5) - hash) + character;\n                hash |= 0; // Convert to 32bit integer\n            }\n            return hash;\n        },\n    };\n\n    /* MULTISELECT PLUGIN DEFINITION\n     * ======================= */\n\n    $.fn.multiSelect = function () {\n        var option = arguments[0],\n            args = arguments;\n\n        return this.each(function () {\n            var $this = $(this),\n                data = $this.data('multiselect'),\n                options = $.extend({}, $.fn.multiSelect.defaults, $this.data(), typeof option === 'object' && option);\n\n            if (!data) {\n                $this.data('multiselect', (data = new MultiSelect(this, options)));\n            }\n\n            if (typeof option === 'string') {\n                data[option](args[1]);\n            } else {\n                data.init();\n            }\n        });\n    };\n\n    $.fn.multiSelect.defaults = {\n        keySelect: [32],\n        selectableOptgroup: false,\n        disabledClass: 'disabled',\n        dblClick: false,\n        keepOrder: false,\n        cssClass: '',\n    };\n\n    $.fn.multiSelect.Constructor = MultiSelect;\n\n    $.fn.insertAt = function (index, $parent) {\n        return this.each(function () {\n            if (index === 0) {\n                $parent.prepend(this);\n            } else {\n                $parent.children().eq(index - 1).after(this);\n            }\n        });\n    };\n\n}(window.jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}